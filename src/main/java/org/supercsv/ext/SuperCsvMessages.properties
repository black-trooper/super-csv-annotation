csvError=(row, column)=(${rowNumber}, ${columnNumber}) : hasError
csvError.noMatchColumnSize=(row)=(${rowNumber}) : no match column size. expected size=${expectedSize}, but actual size='${value}'
csvError.notMatchHeader=(row)=(${rowNumber}) : no match header value. expected '${expectedValue}', but actual '${value}'

# original CellProcessor
org.supercsv.cellprocessor.ConvertNullTo.violated=(row, column)=(${rowNumber}, ${columnNumber}) : fail to convert from null object
org.supercsv.cellprocessor.FmtBool.violated=(row, column)=(${rowNumber}, ${columnNumber}) : fail to format boolean from '${value}'
org.supercsv.cellprocessor.FmtDate.violated=(row, column)=(${rowNumber}, ${columnNumber}) : fail to date from '${value}'
org.supercsv.cellprocessor.FmtNumber.violated=(row, column)=(${rowNumber}, ${columnNumber}) : fail to number from '${value}'
org.supercsv.cellprocessor.HashMapper.violated=(row, column)=(${rowNumber}, ${columnNumber}) : fail to convert '${value}' with hash map
org.supercsv.cellprocessor.Optional.violated=(row, column)=(${rowNumber}, ${columnNumber}) : fail to convert optional value
org.supercsv.cellprocessor.ParseBigDecimal.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' cannot parse to BigDecimal object
org.supercsv.cellprocessor.ParseBool.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' cannot parse to Boolean object
org.supercsv.cellprocessor.ParseChar.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' cannot parse to Character objet
org.supercsv.cellprocessor.ParseDate.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' cannot parse to Date object
org.supercsv.cellprocessor.ParseDouble.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' cannot parse to Double object
org.supercsv.cellprocessor.ParseInt.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' cannot parse to Integer object
org.supercsv.cellprocessor.ParseLong.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' cannot parse to Long object
org.supercsv.cellprocessor.StrReplace.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' cannot replace string
org.supercsv.cellprocessor.Token.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' cannot convert special token
org.supercsv.cellprocessor.Trim.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' cannot triming character
org.supercsv.cellprocessor.Truncate.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' cannot truncate

# original CellProcessor( constraint )
org.supercsv.cellprocessor.constraint.DMinMax.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' in the range min through max
org.supercsv.cellprocessor.constraint.Equals.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' is not equal
org.supercsv.cellprocessor.constraint.ForbidSubStr.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' must not contain the forbidden substring
org.supercsv.cellprocessor.constraint.IsIncludedIn.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' must include in the value
org.supercsv.cellprocessor.constraint.LMinMax.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' is not in the range min through max
org.supercsv.cellprocessor.constraint.NotNull.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' cannot be null
org.supercsv.cellprocessor.constraint.RequireHashCode.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' must be equal hash code
org.supercsv.cellprocessor.constraint.RequireSubStr.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' must contain the substring
org.supercsv.cellprocessor.constraint.Strlen.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' is not between min and max characters long
org.supercsv.cellprocessor.constraint.StrMinMax.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' is not between min and max chracters long.
org.supercsv.cellprocessor.constraint.StrNotNullOrEmpty.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' cannot be empty
org.supercsv.cellprocessor.constraint.StrRegEx.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' does not match the pattern
org.supercsv.cellprocessor.constraint.Unique.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' is not be unique
org.supercsv.cellprocessor.constraint.UniqueHashCode.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' has not uniqe hash code

# customize's contibution CellProcessor
org.supercsv.ext.cellprocessor.FormatEnum.violated=(row, column)=(${rowNumber}, ${columnNumber}) : fail to convert enum from '${value}'
org.supercsv.ext.cellprocessor.FormatLocaleDate.violated=(row, column)=(${rowNumber}, ${columnNumber}) : fail to convert date with locale from '${value}'
org.supercsv.ext.cellprocessor.FormatLocaleNumber.violated=(row, column)=(${rowNumber}, ${columnNumber}) : fail to convert number from '${value}'
org.supercsv.ext.cellprocessor.ParseBigInteger.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' cannot parse to BigInteger object
org.supercsv.ext.cellprocessor.ParseBoolean.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' is cannot parse to Boolean for true values '${trueValues}' or false values '${falseValues}'.
org.supercsv.ext.cellprocessor.ParseByte.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' is cannot parse to Byte object
org.supercsv.ext.cellprocessor.ParseEnum.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' is cannot parse to Enum object
org.supercsv.ext.cellprocessor.ParseFloat.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' is cannot parse to Float object
org.supercsv.ext.cellprocessor.ParseLocaleDate.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' cannot parse to Date object with pattern '${pattern}'
org.supercsv.ext.cellprocessor.ParseLocaleNumber.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' cannot parse to Number object with pattern '${pattern}'
org.supercsv.ext.cellprocessor.ParseLocaleSqlDate.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' cannot parse to SqlDate object with pattern '${pattern}'
org.supercsv.ext.cellprocessor.ParseLocaleTime.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' cannot parse to Time object with pattern '${pattern}'
org.supercsv.ext.cellprocessor.ParseLocaleTimestamp.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' cannot parse to Timestamp object with pattern '${pattern}'
org.supercsv.ext.cellprocessor.ParseShort.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' cannot parse to Short object

# customize's contibution CellProcessor ( constraint )
org.supercsv.ext.cellprocessor.constraint.DateRange.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' is not in the range ${min} through ${max}
org.supercsv.ext.cellprocessor.constraint.FutureDate.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' must be in the future ${min} 
org.supercsv.ext.cellprocessor.constraint.Length.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' is not between ${min} and ${max} characters long
org.supercsv.ext.cellprocessor.constraint.Max.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' cannot be greater than ${max}
org.supercsv.ext.cellprocessor.constraint.MaxLength.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' cannot be longer than ${max} characters
org.supercsv.ext.cellprocessor.constraint.Min.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' cannnt be smaller than ${min}
org.supercsv.ext.cellprocessor.constraint.MinLength.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' cannot be shorter than ${min} characters
org.supercsv.ext.cellprocessor.constraint.Range.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' is not in the range ${min} throud ${max}
org.supercsv.ext.cellprocessor.constraint.PastDate.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' must be in the past ${max}
org.supercsv.ext.cellprocessor.constraint.Trim.violated=(row, column)=(${rowNumber}, ${columnNumber}) : '${value}' cannot triming character
