            ------
                        拡張方法
            ------
            Tatsuo TSUCHIE
            ------
            2014-10-30

拡張方法

%{toc|section=1|fromDepth=1|toDepth=3}

* {独自のCellProcessorBuilderの作成}

 独自のクラスタイプを処理するときには、クラスに対するCellProcessorBuilderを登録することになります。
 CellProcessorBuilderは、AbstractCellProcessorBuilderを継承して作成します。
 
 Genericsに、処理対象のクラスタイプを指定します。
 
-------
public class CustomCellProcessor extends AbstractCellProcessorBuilder<CustomObject> {
    // 書き込み時用のCellProcessorの組み立て
    @Override
    public CellProcessor buildOutputCellProcessor(final Class<CustomObject> type, final  Annotation[] annos,
            final CellProcessor processor, final boolean ignoreValidationProcessor) {
         //TODO: 実装
    }
    
    // 読み込み時用のCellProcessorの組み立て
    @Override
    public CellProcessor buildInputCellProcessor(final Class<CustomObject> type, final Annotation[] annos,
            final CellProcessor processor) {
         //TODO: 実装
    }
}
------

 独自のCellProcessorBuilderの登録方法は、次の2通りがあります。
 
 * CellProcessorBuilderContainerに登録する。
 
   * CellProcessorBuilderContainerへの登録方法は、下記の「既存のCellProcessorBuilderの変更」を参照してください。
 
 * アノテーション @CsvColumn(builderClass=\<独自のCellProcessorBuilder\>)で指定する。

   * CellProcessorBuilderのインスタンスの生成方法を変更したい場合は、下記の「独自のCellProcessorBuilderFactoryの指定」を参照してください。
 
 []


-------
// @CsvColumnで指定する場合。
public class Data {
    @CsvColumn(position=0, builderClass=CustomCellProcessor.class)
    private CustomObject myObject;
}
-------

* {既存のCellProcessorBuilderの変更}

 既存のCellProcessorBuilderは、「CellProcessorBuilderContainer」クラスで管理しています。
 さらに、CellProcessorBuilderContainerは、「CsvAnnotationBeanParser」クラスでインスタンスを保持されています。
 
 CsvAnnotationBeanParserのインスタンスを、CsvAnnotationBeanReader/CsvAnnotationBeanWriterのコンストラクタに渡して使用します。

-------
// CsvAnnotationBeanParserからCellProcessorBuilderContainerを取得しカスタマイズする。
CsvAnnotationBeanParser beanParser = new CsvAnnotationBeanParser();

CellProcessorBuilderContainer builderContainer = beanParser.getBuilderContainer();
builderContainer.registerBuilder(String.class, new CustomizeStringCellProcessor());

// CsvAnnotationBeanParserを、CsvAnnotationBeanReaderに渡す。
CsvAnnotationBeanReader csvReader = 
    new CsvAnnotationBeanReader(SampleBean.class, strWriter, CsvPreference.STANDARD_PREFERENCE, beanParser);

-------

* {独自のCellProcessorBuilderFactoryの指定}

 CellProcessorBuilderのインスタンスをSpringFrameworkなどのDIコンテナから取得する時は、
 「CellProcessorBuilderFactory」をカスタマイズします。

 既存のCellProcessorBuilderFactoryは、「CellProcessorBuilderContainer」クラスで管理しています。
 さらに、CellProcessorBuilderContainerは、「CsvAnnotationBeanParser」クラスでインスタンスを保持されています。

 CsvAnnotationBeanParserのインスタンスを、CsvAnnotationBeanReader/CsvAnnotationBeanWriterのコンストラクタに渡して使用します。

 
 SpringFramework経由でインスタンスを取得したい場合は、SpringCellProcessorBuilderFacatoryを使用します。
 SpringCellProcessorBuilderFacatoryを予め、Springのコンテナに登録しておく必要があります。

-------
// CsvAnnotationBeanParserからCellProcessorBuilderContainerを取得しカスタマイズする。
CsvAnnotationBeanParser beanParser = new CsvAnnotationBeanParser();

// SpringCellProcessorBuilderFacatoryのインスタンスを渡す。
SpringCellProcessorBuilderFacatory builderFactory = /* SpringFrameworkのコンテナから取得 */;
beanParser.setBuilderFactory(builderFactory);

// CsvAnnotationBeanParserを、CsvAnnotationBeanReaderに渡す。
CsvAnnotationBeanReader<SampleBean> csvReader = 
    new CsvAnnotationBeanReader(SampleBean.class, strWriter, CsvPreference.STANDARD_PREFERENCE, beanParser);
-------

* {SpringFrameworkを利用した独自のCellProcessorの作成例}

 SpringFrameworkのコンテナ管理である「UserService」をCellProcessor内で利用する例を紹介します。

 ここでの例は、CSVの読み込み時にユーザIDがDBに存在するかどうかの制約によるチェックを行います。
 
 
 CellProcessorはChain of Responsibirityで組み立てるため、引数にCellProcessorを持つものと持たないコンストラクタを定義します。
 
---------
public class UserIdExist extends CellProcessorAdaptor 
        implements StringCellProcessor, ValidationCellProcessor {
    
    private UserService userService;
    
    public UserIdExist(UserService userService) {
        this.userService = userService;
    }
    
    public UserIdExist(UserService userService, final CellProcessor next) {
        super(next);
        this.userService = userService;
    }
    
    @Override
    public String getMessageCode() {
        return "UserIdExist";
    }
    
    @Override
    public Map<String, ?> getMessageVariable() {
        Map<String, ?> vars = new HashMap<String, Object>();
        return vars;
    }
    
    @Override
    public String formatValue(final Object value) {
        if(value == null) {
            return "";
        }
        return value.toString();
    }
    
    @Override
    public Object execute(final Object value, final CSVContext context) {
        
        validateInputNotNull(value, context);
        
        final String stringValue = value.toString();
        if( !userService.existByUserId(stringValue) ) {
            throw new SuperCsvConstraintViolationException(String.format("not exist userId '%s'", stringValue),
                    context, this);
        }
        
        return next.execute(stringValue, context);
    }
}
---------

 
 Spring コンテテナ管理の「CellProcessorBuilder」を定義します。
 
 CellProcessorのUserIdExistをChainで既存のCellProcessorに追加します。
 最後に実行されるよう、既存のCellProcessorの組み立ての前に、追加しておきます。
 
 Springコンテナ管理の「UserService」をインジェクションしておき、独自のCellProcesorに渡します。
 
---------
public class UserIdCellProcessorBuilder extends StringCellProcessorBuilder {
    
    @Autowired
    private UserService userService;
    
    @Override
    public CellProcessor buildOutputCellProcessor(final Class<String> type, final  Annotation[] annos,
            final CellProcessor processor, final boolean ignoreValidationProcessor) {
        
        CellProcessor cellProcessor = super.buildOutputCellProcessor(type, annos, processor, ignoreValidationProcessor);
        return cellProcessor;
    }
    
    @Override
    public CellProcessor buildInputCellProcessor(final Class<String> type, final Annotation[] annos,
            final CellProcessor processor) {
        
        CellProcessor cellProcessor = processor;
        
        // 独自のCellProcessorの組み立て。
        if(cellProcessor == null) {
            cellProcessor = new UserIdExist(userService);
        } else {
            cellProcessor = new UserIdExist(userService, cellProcessor);
        }
        
        // 既存のCellProcessorの組み立て。先頭に追加する。
        cellProcessor = super.buildInputCellProcessor(type, annos, cellProcessor);
        
        return cellProcessor;
    }
    
}
---------


 CsvのBean定義の際には、独自に追加したCellProcessorBuilderを指定します。
 
-----------
@CsvBean(header=true)
public class UserCsv {
    
    @CsvColumn(position=0, label="ユーザID", builderClass=UserIdCellProcessorBuilder.class)
    private String id;
    
    // setteer/getterは省略
}
------------


 SpringのApplicationContext.xmlには、必要なクラスを登録しておきます。
 
------
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.2.xsd
    ">
    
    <context:annotation-config />
    
    <bean id="springCellProcessorBuilderFacatory" class="org.supercsv.ext.builder.SpringCellProcessorBuilderFacatory" />
    
    <bean id="userIdCellProcessorBuilder" class="org.supercsv.ext.spring.UserIdCellProcessorBuilder"/>
    
    <bean id="userService" class="org.supercsv.ext.spring.UserService"/>

</beans>
------

 Spring のコンテナからpringCellProcessorBuilderFacatoryを取得し、CsvAnnotationBeanParserに渡して使用します。
 
-------
SpringCellProcessorBuilderFacatory builderFactory = /* SpringFrameworkのコンテナから取得 */;

CsvAnnotationBeanParser beanParser = new CsvAnnotationBeanParser();
beanParser.setBuilderFactory(builderFactory);

// CsvAnnotationBeanParserを、CsvAnnotationBeanReaderに渡す。
CsvAnnotationBeanReader<UserCsv> csvReader = 
    new CsvAnnotationBeanReader(UserCsv.class, strWriter, CsvPreference.STANDARD_PREFERENCE,
    beanParser);
-------


